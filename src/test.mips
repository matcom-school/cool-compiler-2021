.TYPE
type Main: {
	attribute type          ->  Main
	function abort          ->  Object_abort
	function copy           ->  Object_copy
	function type_name      ->  Object_type_name
	function in_int         ->  IO_in_int
	function in_string      ->  IO_in_string
	function out_int        ->  IO_out_int
	function out_string     ->  IO_out_string
	function main           ->  Main_main
	function fib            ->  Main_fib
}
.DATA
	data string_0: Enter n to find nth fibonacci number!

	data string_1: 

.FUNCTION
function Main_main: {
	PARAM self
	LOCAL step@block@0
	LOCAL param_0_to_out_string@0
	LOCAL step@block@1
	LOCAL param_0_to_fib@0
	LOCAL param_0_to_out_int@0
	LOCAL param_0_to_out_string@1
	LOCAL @result
	
	
	Load param_0_to_out_string@0 string_0 
	
	Arg self 
	
	Arg param_0_to_out_string@0 
	
	VCall step@block@0 Main IO_out_string 
	
	Arg self 
	
	VCall param_0_to_fib@0 Main IO_in_int 
	
	Arg self 
	
	Arg param_0_to_fib@0 
	
	VCall param_0_to_out_int@0 Main Main_fib 
	
	Arg self 
	
	Arg param_0_to_out_int@0 
	
	VCall step@block@1 Main IO_out_int 
	
	Load param_0_to_out_string@1 string_1 
	
	Arg self 
	
	Arg param_0_to_out_string@1 
	
	VCall @result Main IO_out_string 
	Return @result 
	
}
function Main_fib: {
	PARAM self
	PARAM i@0
	LOCAL a
	LOCAL b
	LOCAL c
	LOCAL step@block@0
	LOCAL result@while@0
	LOCAL step@block@1
	LOCAL sum@_a@0
	LOCAL sum@_b@0
	LOCAL result@assing@c@0
	LOCAL step@block@2
	LOCAL rest@_a@0
	LOCAL rest@_b@0
	LOCAL result@assing@i@0
	LOCAL step@block@3
	LOCAL result@assing@b@0
	LOCAL result@assing@a@0
	LOCAL cond@while@0
	LOCAL neg@_unary@0
	LOCAL int_eq@_a@0
	LOCAL int_eq@_b@0
	LOCAL @result
	Assign a 1 
	
	Assign b 0 
	
	Assign c 0 
	
	
	
	
	GoTo while_cond_0 
	Label while_back_0 
	
	
	Assign sum@_a@0 a 
	
	Assign sum@_b@0 b 
	
	Sum result@assing@c@0 sum@_a@0 sum@_b@0 
	
	Assign c result@assing@c@0 
	Assign step@block@1 c 
	
	Assign rest@_a@0 i@0 
	
	Assign rest@_b@0 1 
	
	Rest result@assing@i@0 rest@_a@0 rest@_b@0 
	
	Assign i@0 result@assing@i@0 
	Assign step@block@2 i@0 
	
	Assign result@assing@b@0 a 
	
	Assign b result@assing@b@0 
	Assign step@block@3 b 
	
	Assign result@assing@a@0 c 
	
	Assign a result@assing@a@0 
	Assign result@while@0 a 
	Label while_cond_0 
	
	Assign int_eq@_a@0 i@0 
	
	Assign int_eq@_b@0 0 
	
	CmpInt neg@_unary@0 int_eq@_a@0 int_eq@_b@0 
	Neg cond@while@0 neg@_unary@0 
	IfGoTo cond@while@0 while_back_0 
	
	Assign step@block@0 self 
	
	Assign @result c 
	Return @result 
	
}
function new_ctr_Main: {
	LOCAL instance
	LOCAL type_name@0
	LOCAL @result
	ALLOCATE instance Main 
	
	Load type_name@0 Main_name 
	
	SetAttr instance type type_name@0 
	
	Arg instance 
	VCall @result Main Main_main 
	Return 0 
}
