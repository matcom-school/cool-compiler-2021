.data
Bool_parents: .word 1, 2, 0, 
Bool: .word Bool_parents, Object_abort, Object_copy, Object_type_name, 
Int_parents: .word 1, 3, 0, 
Int: .word Int_parents, Object_abort, Object_copy, Object_type_name, 
String_parents: .word 1, 4, 0, 
String: .word String_parents, Object_abort, Object_copy, Object_type_name, String_concat, String_length, String_substr, 
SELF_TYPE_parents: .word 1, 5, 0, 
SELF_TYPE: .word SELF_TYPE_parents, Object_abort, Object_copy, Object_type_name, 
Object_parents: .word 1, 0, 
Object: .word Object_parents, Object_abort, Object_copy, Object_type_name, 
IO_parents: .word 1, 6, 0, 
IO: .word IO_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, 
Main_parents: .word 1, 6, 7, 0, 
Main: .word Main_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Main_main, Main_fib, 
string_0: .asciiz "Enter n to find nth fibonacci number!\n"
string_1: .asciiz "\n"

.text
.globl main
main:
addi $sp, $sp, -4          #Push local var self stackpointer 20
addi $sp, $sp, -4          #Push local var instance stackpointer 16
addi $sp, $sp, -4          #Push local var type_name@0 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Main
#Allocate a una class Main puntero en sp + 12
#atributo type_name en puntero + 0
li $a0, 4
li $v0, 9
syscall
sw $v0, 12($sp)          #Reservando memoria para una instancia de tipo Main
lw $t0, 12($sp)          #Lee de la pila instance en 12 para assignar
sw $t0, 16($sp)          #Escribe en la pila el valor que se le asigno a self
la $t0, Main
sw $t0, 8($sp)          #Cargando el nombre del tipo desde el data
lw $t0, 12($sp)          #Buscando en la pila la variable instance y guarda la direccion a la que apunta
lw $t1, 8($sp)          #Buscando el valor que se va a guardar en la propiedad
sw $t1, 0($t0)          #Seteando el valor en la direccion de la memoria del objeto          #Assignando el nombre del tipo en el campo type
lw $t0, 12($sp)          #Saca de la pila instance
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance
jal Main_main          #Call a la function Main_main
sw $s0, 4($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
li $v0, 10
syscall

Main_main:
#Parametro self en stackpoiner + 36
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 32
addi $sp, $sp, -4          #Push local var param_0_to_out_string@0 stackpointer 28
addi $sp, $sp, -4          #Push local var step@block@1 stackpointer 24
addi $sp, $sp, -4          #Push local var param_0_to_fib@0 stackpointer 20
addi $sp, $sp, -4          #Push local var param_0_to_out_int@0 stackpointer 16
addi $sp, $sp, -4          #Push local var param_0_to_out_string@1 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Main_main          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
la $t0, string_0
sw $t0, 24($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 32($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 28($sp)          #Saca de la pila param_0_to_out_string@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@0          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 28($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Inicio del paso 1 de una sequencia Block
lw $t0, 32($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch in_int
jal IO_in_int          #Call a la function IO_in_int
sw $s0, 16($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin del paramentro 0 al StaticDispatch fib
lw $t0, 32($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch fib
lw $t0, 20($sp)          #Saca de la pila param_0_to_fib@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_fib@0          #Agrega a la pila el paramentro 1 al StaticDispatch fib
jal Main_fib          #Call a la function Main_fib
sw $s0, 12($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin del paramentro 0 al StaticDispatch out_int
lw $t0, 32($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_int
lw $t0, 16($sp)          #Saca de la pila param_0_to_out_int@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_int@0          #Agrega a la pila el paramentro 1 al StaticDispatch out_int
jal IO_out_int          #Call a la function IO_out_int
sw $s0, 20($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Inicio del paso 2 de una sequencia Block
la $t0, string_1
sw $t0, 8($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 32($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 12($sp)          #Saca de la pila param_0_to_out_string@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@1          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 4($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 36          #Limpia la pila
jr $ra          #Final de la function main


IO_out_string:
li $v0, 4
lw $a0, 0($sp)
syscall
lw $a0, 4($sp)
addi $sp, $sp, 8
jr $ra

IO_in_int:
li $v0,5
syscall
move $s0 , $v0
addi $sp ,$sp ,4
jr $ra

Main_fib:
#Parametro self en stackpoiner + 96
#Parametro i@0 en stackpoiner + 92
addi $sp, $sp, -4          #Push local var a stackpointer 88
addi $sp, $sp, -4          #Push local var b stackpointer 84
addi $sp, $sp, -4          #Push local var c stackpointer 80
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 76
addi $sp, $sp, -4          #Push local var result@while@0 stackpointer 72
addi $sp, $sp, -4          #Push local var step@block@1 stackpointer 68
addi $sp, $sp, -4          #Push local var sum@_a@0 stackpointer 64
addi $sp, $sp, -4          #Push local var sum@_b@0 stackpointer 60
addi $sp, $sp, -4          #Push local var result@assing@c@0 stackpointer 56
addi $sp, $sp, -4          #Push local var step@block@2 stackpointer 52
addi $sp, $sp, -4          #Push local var rest@_a@0 stackpointer 48
addi $sp, $sp, -4          #Push local var rest@_b@0 stackpointer 44
addi $sp, $sp, -4          #Push local var result@assing@i@0 stackpointer 40
addi $sp, $sp, -4          #Push local var step@block@3 stackpointer 36
addi $sp, $sp, -4          #Push local var result@assing@b@0 stackpointer 32
addi $sp, $sp, -4          #Push local var result@assing@a@0 stackpointer 28
addi $sp, $sp, -4          #Push local var cond@while@0 stackpointer 24
addi $sp, $sp, -4          #Push local var neg@_unary@0 stackpointer 20
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 16
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Main_fib
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 84($sp)          #Escribe en la pila el numero que se le asigno a a          #Fin de la asignacion Let a
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 80($sp)          #Escribe en la pila el numero que se le asigno a b          #Fin de la asignacion Let b
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 76($sp)          #Escribe en la pila el numero que se le asigno a c          #Fin de la asignacion Let c          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block          #Inicio de un While
j while_cond_0          #Salta para f{label} 
while_back_0 :           #Crea el label while_back_0           #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
lw $t0, 84($sp)          #Lee de la pila a en 84 para assignar
sw $t0, 60($sp)          #Escribe en la pila el valor que se le asigno a sum@_a@0          #Resolucion del operado izquierdo de una opercion sum
lw $t0, 80($sp)          #Lee de la pila b en 80 para assignar
sw $t0, 56($sp)          #Escribe en la pila el valor que se le asigno a sum@_b@0          #Resolucion del operado derecha de una opercion sum
lw $t0, 60($sp)          #poner en registro $t0 lo que hay en 60
lw $t1, 56($sp)          #poner en registro $t1 lo que hay en 56
add $t0, $t0, $t1          #en $t0 pon el resultado de la suma
sw $t0, 52($sp)          #poner en la posicion 52 el resultado           #Fin de la expresion lista para ser asignada
lw $t0, 52($sp)          #Lee de la pila result@assing@c@0 en 52 para assignar
sw $t0, 76($sp)          #Escribe en la pila el valor que se le asigno a c
lw $t0, 76($sp)          #Lee de la pila c en 76 para assignar
sw $t0, 64($sp)          #Escribe en la pila el valor que se le asigno a step@block@1          #Inicio del paso 1 de una sequencia Block
lw $t0, 88($sp)          #Lee de la pila i@0 en 88 para assignar
sw $t0, 44($sp)          #Escribe en la pila el valor que se le asigno a rest@_a@0          #Resolucion del operado izquierdo de una opercion rest
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 40($sp)          #Escribe en la pila el numero que se le asigno a rest@_b@0          #Resolucion del operado derecha de una opercion rest
lw $t0, 44($sp)          #poner en registro $t0 lo que hay en 44
lw $t1, 40($sp)          #poner en registro $t1 lo que hay en f'{stack_plus_opr_2}
sub $t0, $t0, $t1          #poner en registro $t0 la suma 
sw $t0, 36($sp)          #poner en 36 el resultado de la suma           #Fin de la expresion lista para ser asignada
lw $t0, 36($sp)          #Lee de la pila result@assing@i@0 en 36 para assignar
sw $t0, 88($sp)          #Escribe en la pila el valor que se le asigno a i@0
lw $t0, 88($sp)          #Lee de la pila i@0 en 88 para assignar
sw $t0, 48($sp)          #Escribe en la pila el valor que se le asigno a step@block@2          #Inicio del paso 2 de una sequencia Block
lw $t0, 84($sp)          #Lee de la pila a en 84 para assignar
sw $t0, 28($sp)          #Escribe en la pila el valor que se le asigno a result@assing@b@0          #Fin de la expresion lista para ser asignada
lw $t0, 28($sp)          #Lee de la pila result@assing@b@0 en 28 para assignar
sw $t0, 80($sp)          #Escribe en la pila el valor que se le asigno a b
lw $t0, 80($sp)          #Lee de la pila b en 80 para assignar
sw $t0, 32($sp)          #Escribe en la pila el valor que se le asigno a step@block@3          #Inicio del paso 3 de una sequencia Block
lw $t0, 76($sp)          #Lee de la pila c en 76 para assignar
sw $t0, 24($sp)          #Escribe en la pila el valor que se le asigno a result@assing@a@0          #Fin de la expresion lista para ser asignada
lw $t0, 24($sp)          #Lee de la pila result@assing@a@0 en 24 para assignar
sw $t0, 84($sp)          #Escribe en la pila el valor que se le asigno a a
lw $t0, 84($sp)          #Lee de la pila a en 84 para assignar
sw $t0, 68($sp)          #Escribe en la pila el valor que se le asigno a result@while@0
while_cond_0 :           #Crea el label while_cond_0           #Fin del cuerpo e inicio de la condicion de un While
lw $t0, 88($sp)          #Lee de la pila i@0 en 88 para assignar
sw $t0, 12($sp)          #Escribe en la pila el valor que se le asigno a int_eq@_a@0          #Resolucion del operado izquierdo de una opercion int_eq
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 8($sp)          #Escribe en la pila el numero que se le asigno a int_eq@_b@0          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 12($sp)          #carga en $t1 lo que hay en 12 
lw $t2, 8($sp)          #carga en $t2 lo que hay en 8 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 16($sp)          #Pon en la posicion 16 el valor de $t3
lw $t0, 16($sp)          #Carga la pos 16 en $t0
addi $t1, $t0, -1          #$t1 =  $t0 + (-1)
mul $t0, $t1, -1          #$t0 =  $t1 * (-1)
sw $t0, 20($sp)          #poner en la posicion 20 el contenido de $t0
li $t0, 1          #Cargar 1 a $t0 pa comparar
lw $t1, 20($sp)          #Cargar el valor de la pos  20 a $t1 pa comparar
beq $t0 $t1 while_back_0          #if $t1==$t0 then jump while_back_0          #Fin de la condicion de un While
lw $t0, 92($sp)          #Lee de la pila self en 92 para assignar
sw $t0, 72($sp)          #Escribe en la pila el valor que se le asigno a step@block@0          #Inicio del paso 1 de una sequencia Block
lw $t0, 76($sp)          #Lee de la pila c en 76 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 96          #Limpia la pila
jr $ra          #Final de la function fib


IO_out_int:
li $v0, 1
lw $a0, 0($sp)
syscall
lw $a0, 4($sp)
addi $sp, $sp, 8
jr $ra
