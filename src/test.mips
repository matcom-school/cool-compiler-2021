.data
Bool_parents: .word 1, 2, 0, 
Bool: .word Bool_parents, Object_abort, Object_copy, Object_type_name, 
Int_parents: .word 1, 3, 0, 
Int: .word Int_parents, Object_abort, Object_copy, Object_type_name, 
String_parents: .word 1, 4, 0, 
String: .word String_parents, Object_abort, Object_copy, Object_type_name, String_concat, String_length, String_substr, 
SELF_TYPE_parents: .word 1, 5, 0, 
SELF_TYPE: .word SELF_TYPE_parents, Object_abort, Object_copy, Object_type_name, 
Object_parents: .word 1, 0, 
Object: .word Object_parents, Object_abort, Object_copy, Object_type_name, 
IO_parents: .word 1, 6, 0, 
IO: .word IO_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, 
Main_parents: .word 1, 6, 7, 0, 
Main: .word Main_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Main_pal, Main_main, 
string_0: .asciiz "enter a string\n"
string_1: .asciiz "that was not a palindrome\n"
string_2: .asciiz "that was a palindrome\n"

.text
.globl main
main:
addi $sp, $sp, -4          #Push local var self stackpointer 16
addi $sp, $sp, -4          #Push local var instance stackpointer 12
addi $sp, $sp, -4          #Push local var type_name@0 stackpointer 8
addi $sp, $sp, -4          #Push local var @result stackpointer 4
addi $sp, $sp, -4          #Push local var $ra stackpointer 0
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Main
#Allocate a una class Main puntero en sp + 12
#atributo type_name en puntero + 0
#atributo i en puntero + 4
li $a0, 8
li $v0, 9
syscall
sw $v0, 12($sp)          #Reservando memoria para una instancia de tipo Main
lw $t0, 12($sp)          #Lee de la pila instance en 12 para assignar
sw $t0, 16($sp)          #Escribe en la pila el valor que se le asigno a self
la $t0, Main
sw $t0, 8($sp)          #Cargando el nombre del tipo desde el data
lw $t0, 12($sp)          #Buscando en la pila la variable instance y guarda la direccion a la que apunta
lw $t1, 8($sp)          #Buscando el valor que se va a guardar en la propiedad
sw $t1, 0($t0)          #Seteando el valor en la direccion de la memoria del objeto          #Assignando el nombre del tipo en el campo type
lw $t0, 12($sp)          #Saca de la pila instance
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance
jal Main_main          #Call a la function Main_main
sw $s0, 4($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
li $v0, 10
syscall

Main_main:
#Parametro self en stackpoiner + 48
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 44
addi $sp, $sp, -4          #Push local var compl@_unary@0 stackpointer 40
addi $sp, $sp, -4          #Push local var result@assing@i@0 stackpointer 36
addi $sp, $sp, -4          #Push local var step@block@1 stackpointer 32
addi $sp, $sp, -4          #Push local var param_0_to_out_string@0 stackpointer 28
addi $sp, $sp, -4          #Push local var cond@if_else@0 stackpointer 24
addi $sp, $sp, -4          #Push local var param_0_to_pal@0 stackpointer 20
addi $sp, $sp, -4          #Push local var result@if@0 stackpointer 16
addi $sp, $sp, -4          #Push local var param_0_to_out_string@1 stackpointer 12
addi $sp, $sp, -4          #Push local var param_0_to_out_string@2 stackpointer 8
addi $sp, $sp, -4          #Push local var @result stackpointer 4
addi $sp, $sp, -4          #Push local var $ra stackpointer 0
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Main_main          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 40($sp)          #Escribe en la pila el numero que se le asigno a compl@_unary@0          #Fin de la expresion lista para ser asignada
lw $t0, 48($sp)          #Buscando en la pila la variable self y guarda la direccion a la que apunta
lw $t1, 36($sp)          #Buscando el valor que se va a guardar en la propiedad
sw $t1, 4($t0)          #Seteando el valor en la direccion de la memoria del objeto
lw $t0, 48($sp)          #Buscando la instancia de la clase Main en la pila
lw $t1, 4($t0)          #Buscando el valor de la propiedad i
sw $t1, 44($sp)          #Salvando el valor de la propiedad i en la pila en el valor local step@block@0          #Inicio del paso 1 de una sequencia Block
la $t0, string_0
sw $t0, 28($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 48($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 32($sp)          #Saca de la pila param_0_to_out_string@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@0          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 32($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Inicio del paso 2 de una sequencia Block
lw $t0, 48($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch in_string
jal IO_in_string          #Call a la function IO_in_string
sw $s0, 20($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin del paramentro 0 al StaticDispatch pal
lw $t0, 48($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch pal
lw $t0, 24($sp)          #Saca de la pila param_0_to_pal@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_pal@0          #Agrega a la pila el paramentro 1 al StaticDispatch pal
jal Main_pal          #Call a la function Main_pal
sw $s0, 24($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin de la evaluacion de la condicion de un IF
li $t0, 1          #Cargar 1 a $t0 pa comparar
lw $t1, 24($sp)          #Cargar el valor de la pos  24 a $t1 pa comparar
beq $t0 $t1 then_Main_main_0          #if $t1==$t0 then jump then_Main_main_0          #Else case
la $t0, string_1
sw $t0, 12($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 48($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 16($sp)          #Saca de la pila param_0_to_out_string@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@1          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 16($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
j fin_Main_main_0          #Salta para f{label} 
then_Main_main_0 :           #Crea el label then_Main_main_0           #Then case
la $t0, string_2
sw $t0, 8($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 48($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 12($sp)          #Saca de la pila param_0_to_out_string@2
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@2          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 16($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
fin_Main_main_0 :           #Crea el label fin_Main_main_0           #Fin de un If
lw $t0, 16($sp)          #Lee de la pila result@if@0 en 16 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 52          #Limpia la pila
jr $ra          #Final de la function main


IO_out_string:
li $v0, 4
lw $a0, 0($sp)
syscall
lw $a0, 4($sp)
addi $sp, $sp, 8
jr $ra

IO_in_string:
li $v0,8
li $a1 , 10000
syscall
move $s0 , $a0
addi $sp, $sp, 4
jr $ra

Main_pal:
#Parametro self en stackpoiner + 132
#Parametro s@0 en stackpoiner + 128
addi $sp, $sp, -4          #Push local var cond@if_else@0 stackpointer 124
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 120
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 116
addi $sp, $sp, -4          #Push local var instance_to_call_length@0 stackpointer 112
addi $sp, $sp, -4          #Push local var result@if@0 stackpointer 108
addi $sp, $sp, -4          #Push local var cond@if_else@1 stackpointer 104
addi $sp, $sp, -4          #Push local var int_eq@_a@1 stackpointer 100
addi $sp, $sp, -4          #Push local var int_eq@_b@1 stackpointer 96
addi $sp, $sp, -4          #Push local var instance_to_call_length@1 stackpointer 92
addi $sp, $sp, -4          #Push local var result@if@1 stackpointer 88
addi $sp, $sp, -4          #Push local var cond@if_else@2 stackpointer 84
addi $sp, $sp, -4          #Push local var int_eq@_a@2 stackpointer 80
addi $sp, $sp, -4          #Push local var int_eq@_b@2 stackpointer 76
addi $sp, $sp, -4          #Push local var instance_to_call_substr@0 stackpointer 72
addi $sp, $sp, -4          #Push local var param_0_to_substr@0 stackpointer 68
addi $sp, $sp, -4          #Push local var param_1_to_substr@0 stackpointer 64
addi $sp, $sp, -4          #Push local var instance_to_call_substr@1 stackpointer 60
addi $sp, $sp, -4          #Push local var rest@_a@0 stackpointer 56
addi $sp, $sp, -4          #Push local var rest@_b@0 stackpointer 52
addi $sp, $sp, -4          #Push local var instance_to_call_length@2 stackpointer 48
addi $sp, $sp, -4          #Push local var param_0_to_substr@1 stackpointer 44
addi $sp, $sp, -4          #Push local var param_1_to_substr@1 stackpointer 40
addi $sp, $sp, -4          #Push local var result@if@2 stackpointer 36
addi $sp, $sp, -4          #Push local var instance_to_call_substr@2 stackpointer 32
addi $sp, $sp, -4          #Push local var param_0_to_substr@2 stackpointer 28
addi $sp, $sp, -4          #Push local var rest@_a@1 stackpointer 24
addi $sp, $sp, -4          #Push local var rest@_b@1 stackpointer 20
addi $sp, $sp, -4          #Push local var instance_to_call_length@3 stackpointer 16
addi $sp, $sp, -4          #Push local var param_1_to_substr@2 stackpointer 12
addi $sp, $sp, -4          #Push local var param_0_to_pal@0 stackpointer 8
addi $sp, $sp, -4          #Push local var @result stackpointer 4
addi $sp, $sp, -4          #Push local var $ra stackpointer 0
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Main_pal
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 112($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_length@0          #Fin de la exprecion previa al Dispatch length
lw $t0, 112($sp)          #Saca de la pila instance_to_call_length@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_length@0
lw $t0, 116($sp)          #Sacando la instancia de la pila (en 112) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 20($t1)          #Buscando el metodo dinamico para la funcion length

li $v0 , 10
syscall

jal $t3          #Call a la function $t3
sw $s0, 120($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado izquierdo de una opercion int_eq
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 116($sp)          #Escribe en la pila el numero que se le asigno a int_eq@_b@0          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 120($sp)          #carga en $t1 lo que hay en 120 
lw $t2, 116($sp)          #carga en $t2 lo que hay en 116 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 124($sp)          #Pon en la posicion 124 el valor de $t3          #Fin de la evaluacion de la condicion de un IF
li $t0, 1          #Cargar 1 a $t0 pa comparar
lw $t1, 124($sp)          #Cargar el valor de la pos  124 a $t1 pa comparar
beq $t0 $t1 then_Main_pal_0          #if $t1==$t0 then jump then_Main_pal_0          #Else case
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 92($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_length@1          #Fin de la exprecion previa al Dispatch length
lw $t0, 92($sp)          #Saca de la pila instance_to_call_length@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_length@1
lw $t0, 96($sp)          #Sacando la instancia de la pila (en 92) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 20($t1)          #Buscando el metodo dinamico para la funcion length
jal $t3          #Call a la function $t3
sw $s0, 100($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado izquierdo de una opercion int_eq
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 96($sp)          #Escribe en la pila el numero que se le asigno a int_eq@_b@1          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 100($sp)          #carga en $t1 lo que hay en 100 
lw $t2, 96($sp)          #carga en $t2 lo que hay en 96 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 104($sp)          #Pon en la posicion 104 el valor de $t3          #Fin de la evaluacion de la condicion de un IF
li $t0, 1          #Cargar 1 a $t0 pa comparar
lw $t1, 104($sp)          #Cargar el valor de la pos  104 a $t1 pa comparar
beq $t0 $t1 then_Main_pal_1          #if $t1==$t0 then jump then_Main_pal_1          #Else case
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 72($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_substr@0          #Fin de la exprecion previa al Dispatch substr
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 68($sp)          #Escribe en la pila el numero que se le asigno a param_0_to_substr@0          #Fin del paramentro 0 al Dispatch substr
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 64($sp)          #Escribe en la pila el numero que se le asigno a param_1_to_substr@0          #Fin del paramentro 1 al Dispatch substr
lw $t0, 72($sp)          #Saca de la pila instance_to_call_substr@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_substr@0
lw $t0, 72($sp)          #Saca de la pila param_0_to_substr@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_substr@0
lw $t0, 72($sp)          #Saca de la pila param_1_to_substr@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_1_to_substr@0
lw $t0, 84($sp)          #Sacando la instancia de la pila (en 72) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 24($t1)          #Buscando el metodo dinamico para la funcion substr
jal $t3          #Call a la function $t3
li $s0 ,3
sw $s0, 80($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 60($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_substr@1          #Fin de la exprecion previa al Dispatch substr
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 48($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_length@2          #Fin de la exprecion previa al Dispatch length
lw $t0, 48($sp)          #Saca de la pila instance_to_call_length@2
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_length@2
lw $t0, 52($sp)          #Sacando la instancia de la pila (en 48) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 20($t1)          #Buscando el metodo dinamico para la funcion length
jal $t3          #Call a la function $t3
sw $s0, 56($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado izquierdo de una opercion rest
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 52($sp)          #Escribe en la pila el numero que se le asigno a rest@_b@0          #Resolucion del operado derecha de una opercion rest
lw $t0, 56($sp)          #poner en registro $t0 lo que hay en 56
lw $t1, 52($sp)          #poner en registro $t1 lo que hay en f'{stack_plus_opr_2}
sub $t0, $t0, $t1          #poner en registro $t0 la suma 
sw $t0, 44($sp)          #poner en 44 el resultado de la suma           #Fin del paramentro 0 al Dispatch substr
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 40($sp)          #Escribe en la pila el numero que se le asigno a param_1_to_substr@1          #Fin del paramentro 1 al Dispatch substr
lw $t0, 60($sp)          #Saca de la pila instance_to_call_substr@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_substr@1
lw $t0, 48($sp)          #Saca de la pila param_0_to_substr@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_substr@1
lw $t0, 48($sp)          #Saca de la pila param_1_to_substr@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_1_to_substr@1
lw $t0, 72($sp)          #Sacando la instancia de la pila (en 60) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 24($t1)          #Buscando el metodo dinamico para la funcion substr
jal $t3          #Call a la function $t3
sw $s0, 76($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 80($sp)          #carga en $t1 lo que hay en 80 
lw $t2, 76($sp)          #carga en $t2 lo que hay en 76 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 84($sp)          #Pon en la posicion 84 el valor de $t3          #Fin de la evaluacion de la condicion de un IF
li $t0, 1          #Cargar 1 a $t0 pa comparar
lw $t1, 84($sp)          #Cargar el valor de la pos  84 a $t1 pa comparar
beq $t0 $t1 then_Main_pal_2          #if $t1==$t0 then jump then_Main_pal_2          #Else case
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 36($sp)          #Escribe en la pila el numero que se le asigno a result@if@2
j fin_Main_pal_2          #Salta para f{label} 
then_Main_pal_2 :           #Crea el label then_Main_pal_2           #Then case
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 32($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_substr@2          #Fin de la exprecion previa al Dispatch substr
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 28($sp)          #Escribe en la pila el numero que se le asigno a param_0_to_substr@2          #Fin del paramentro 0 al Dispatch substr
lw $t0, 128($sp)          #Lee de la pila s@0 en 128 para assignar
sw $t0, 16($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_length@3          #Fin de la exprecion previa al Dispatch length
lw $t0, 16($sp)          #Saca de la pila instance_to_call_length@3
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_length@3
lw $t0, 20($sp)          #Sacando la instancia de la pila (en 16) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 20($t1)          #Buscando el metodo dinamico para la funcion length
jal $t3          #Call a la function $t3
sw $s0, 24($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado izquierdo de una opercion rest
li $t0, 2          #Guarda el numbero que se va a asignar
sw $t0, 20($sp)          #Escribe en la pila el numero que se le asigno a rest@_b@1          #Resolucion del operado derecha de una opercion rest
lw $t0, 24($sp)          #poner en registro $t0 lo que hay en 24
lw $t1, 20($sp)          #poner en registro $t1 lo que hay en f'{stack_plus_opr_2}
sub $t0, $t0, $t1          #poner en registro $t0 la suma 
sw $t0, 12($sp)          #poner en 12 el resultado de la suma           #Fin del paramentro 1 al Dispatch substr
lw $t0, 32($sp)          #Saca de la pila instance_to_call_substr@2
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_substr@2
lw $t0, 32($sp)          #Saca de la pila param_0_to_substr@2
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_substr@2
lw $t0, 20($sp)          #Saca de la pila param_1_to_substr@2
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_1_to_substr@2
lw $t0, 44($sp)          #Sacando la instancia de la pila (en 32) de una clase que hereda de String
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de String
lw $t3, 24($t1)          #Buscando el metodo dinamico para la funcion substr
jal $t3          #Call a la function $t3
sw $s0, 8($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin del paramentro 0 al StaticDispatch pal
lw $t0, 132($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch pal
lw $t0, 12($sp)          #Saca de la pila param_0_to_pal@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_pal@0          #Agrega a la pila el paramentro 1 al StaticDispatch pal
jal Main_pal          #Call a la function Main_pal
sw $s0, 36($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
fin_Main_pal_2 :           #Crea el label fin_Main_pal_2           #Fin de un If
lw $t0, 36($sp)          #Lee de la pila result@if@2 en 36 para assignar
sw $t0, 88($sp)          #Escribe en la pila el valor que se le asigno a result@if@1
j fin_Main_pal_1          #Salta para f{label} 
then_Main_pal_1 :           #Crea el label then_Main_pal_1           #Then case
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 88($sp)          #Escribe en la pila el numero que se le asigno a result@if@1
fin_Main_pal_1 :           #Crea el label fin_Main_pal_1           #Fin de un If
lw $t0, 88($sp)          #Lee de la pila result@if@1 en 88 para assignar
sw $t0, 108($sp)          #Escribe en la pila el valor que se le asigno a result@if@0
j fin_Main_pal_0          #Salta para f{label} 
then_Main_pal_0 :           #Crea el label then_Main_pal_0           #Then case
li $t0, 0          #Guarda el numbero que se va a asignar
sw $t0, 108($sp)          #Escribe en la pila el numero que se le asigno a result@if@0
fin_Main_pal_0 :           #Crea el label fin_Main_pal_0           #Fin de un If
lw $t0, 108($sp)          #Lee de la pila result@if@0 en 108 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 136          #Limpia la pila
jr $ra          #Final de la function pal

