.data
Bool_parents: .word 1, 2, 0, 
Bool: .word Bool_parents, Object_abort, Object_copy, Object_type_name, 
Int_parents: .word 1, 3, 0, 
Int: .word Int_parents, Object_abort, Object_copy, Object_type_name, 
String_parents: .word 1, 4, 0, 
String: .word String_parents, Object_abort, Object_copy, Object_type_name, String_concat, String_length, String_substr, 
SELF_TYPE_parents: .word 1, 5, 0, 
SELF_TYPE: .word SELF_TYPE_parents, Object_abort, Object_copy, Object_type_name, 
Object_parents: .word 1, 0, 
Object: .word Object_parents, Object_abort, Object_copy, Object_type_name, 
IO_parents: .word 1, 6, 0, 
IO: .word IO_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, 
Main_parents: .word 1, 6, 7, 0, 
Main: .word Main_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Main_main, 
Complex_parents: .word 1, 6, 8, 0, 
Complex: .word Complex_parents, Object_abort, Object_copy, Object_type_name, IO_in_int, IO_in_string, IO_out_int, IO_out_string, Complex_init, Complex_print, Complex_reflect_0, Complex_reflect_X, Complex_reflect_Y, 
string_0: .asciiz "=(\n"
string_1: .asciiz "=)\n"
string_2: .asciiz "+"
string_3: .asciiz "I"

.text
.globl main
main:
addi $sp, $sp, -4          #Push local var self stackpointer 20
addi $sp, $sp, -4          #Push local var instance stackpointer 16
addi $sp, $sp, -4          #Push local var type_name@0 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Main
#Allocate a una class Main puntero en sp + 12
#atributo type_name en puntero + 0
li $a0, 4
li $v0, 9
syscall
sw $v0, 12($sp)          #Reservando memoria para una instancia de tipo Main
lw $t0, 12($sp)          #Lee de la pila instance en 12 para assignar
sw $t0, 16($sp)          #Escribe en la pila el valor que se le asigno a self
la $t0, Main
sw $t0, 8($sp)          #Cargando el nombre del tipo desde el data
lw $t0, 12($sp)          #Buscando en la pila la variable instance y guarda la direccion a la que apunta
lw $t1, 8($sp)          #Buscando el valor que se va a guardar en la propiedad
sw $t1, 0($t0)          #Seteando el valor en la direccion de la memoria del objeto          #Assignando el nombre del tipo en el campo type
lw $t0, 12($sp)          #Saca de la pila instance
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance
jal Main_main          #Call a la function Main_main
sw $s0, 4($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
li $v0, 10
syscall

Main_main:
#Parametro self en stackpoiner + 64
addi $sp, $sp, -4          #Push local var c stackpointer 60
addi $sp, $sp, -4          #Push local var instance_to_call_init@0 stackpointer 56
addi $sp, $sp, -4          #Push local var param_0_to_init@0 stackpointer 52
addi $sp, $sp, -4          #Push local var param_1_to_init@0 stackpointer 48
addi $sp, $sp, -4          #Push local var cond@if_else@0 stackpointer 44
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 40
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 36
addi $sp, $sp, -4          #Push local var instance_to_call_reflect_X@0 stackpointer 32
addi $sp, $sp, -4          #Push local var instance_to_call_reflect_Y@0 stackpointer 28
addi $sp, $sp, -4          #Push local var instance_to_call_reflect_0@0 stackpointer 24
addi $sp, $sp, -4          #Push local var result@if@0 stackpointer 20
addi $sp, $sp, -4          #Push local var param_0_to_out_string@0 stackpointer 16
addi $sp, $sp, -4          #Push local var param_0_to_out_string@1 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Main_main
jal new_ctr_Complex          #Call a la function new_ctr_Complex
sw $s0, 52($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin de la exprecion previa al Dispatch init
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 48($sp)          #Escribe en la pila el numero que se le asigno a param_0_to_init@0          #Fin del paramentro 0 al Dispatch init
li $t0, 1          #Guarda el numbero que se va a asignar
sw $t0, 44($sp)          #Escribe en la pila el numero que se le asigno a param_1_to_init@0          #Fin del paramentro 1 al Dispatch init
lw $t0, 52($sp)          #Saca de la pila instance_to_call_init@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_init@0
lw $t0, 52($sp)          #Saca de la pila param_0_to_init@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_init@0
lw $t0, 52($sp)          #Saca de la pila param_1_to_init@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_1_to_init@0
lw $t0, 64($sp)          #Sacando la instancia de la pila (en 52) de una clase que hereda de Complex
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de Complex
lw $t3, 32($t1)          #Buscando el metodo dinamico para la funcion init
jal $t3          #Call a la function $t3
sw $s0, 56($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin de la asignacion Let c
lw $t0, 56($sp)          #Lee de la pila c en 56 para assignar
sw $t0, 28($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_reflect_X@0          #Fin de la exprecion previa al Dispatch reflect_X
lw $t0, 28($sp)          #Saca de la pila instance_to_call_reflect_X@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_reflect_X@0
lw $t0, 32($sp)          #Sacando la instancia de la pila (en 28) de una clase que hereda de Complex
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de Complex
lw $t3, 44($t1)          #Buscando el metodo dinamico para la funcion reflect_X
jal $t3          #Call a la function $t3
sw $s0, 24($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Fin de la exprecion previa al Dispatch reflect_Y
lw $t0, 24($sp)          #Saca de la pila instance_to_call_reflect_Y@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_reflect_Y@0
lw $t0, 28($sp)          #Sacando la instancia de la pila (en 24) de una clase que hereda de Complex
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de Complex
lw $t3, 48($t1)          #Buscando el metodo dinamico para la funcion reflect_Y
jal $t3          #Call a la function $t3
sw $s0, 36($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 56($sp)          #Lee de la pila c en 56 para assignar
sw $t0, 20($sp)          #Escribe en la pila el valor que se le asigno a instance_to_call_reflect_0@0          #Fin de la exprecion previa al Dispatch reflect_0
lw $t0, 20($sp)          #Saca de la pila instance_to_call_reflect_0@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila instance_to_call_reflect_0@0
lw $t0, 24($sp)          #Sacando la instancia de la pila (en 20) de una clase que hereda de Complex
lw $t1, 0($t0)          #Leyendo el tipo de la instancia que hereda de Complex
lw $t3, 40($t1)          #Buscando el metodo dinamico para la funcion reflect_0
jal $t3          #Call a la function $t3
sw $s0, 32($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 36($sp)          #carga en $t1 lo que hay en 36 
lw $t2, 32($sp)          #carga en $t2 lo que hay en 32 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 40($sp)          #Pon en la posicion 40 el valor de $t3          #Fin de la evaluacion de la condicion de un IF
li $t0, 1          #Cargar 1 a $t0 pa comparar
lw $t1, 40($sp)          #Cargar el valor de la pos  40 a $t1 pa comparar
beq $t0 $t1 then_Main_main_0          #if $t1==$t0 then jump then_Main_main_0          #Else case
la $t0, string_0
sw $t0, 12($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 60($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 16($sp)          #Saca de la pila param_0_to_out_string@0
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@0          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 16($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
j fin_Main_main_0          #Salta para f{label} 
then_Main_main_0 :           #Crea el label then_Main_main_0           #Then case
la $t0, string_1
sw $t0, 8($sp)          #Fin del paramentro 0 al StaticDispatch out_string
lw $t0, 60($sp)          #Saca de la pila self
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila self          #Agrega a la pila el paramentro 0 al StaticDispatch out_string
lw $t0, 12($sp)          #Saca de la pila param_0_to_out_string@1
addi $sp, $sp, -4
sw $t0, 0($sp)          #Mete para la pila param_0_to_out_string@1          #Agrega a la pila el paramentro 1 al StaticDispatch out_string
jal IO_out_string          #Call a la function IO_out_string
sw $s0, 16($sp)          #Save el resultado de la funcion que esta en $s0 pa la pila
fin_Main_main_0 :           #Crea el label fin_Main_main_0           #Fin de un If
lw $t0, 16($sp)          #Lee de la pila result@if@0 en 16 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 64          #Limpia la pila
jr $ra          #Final de la function main

new_ctr_Complex:
addi $sp, $sp, -4          #Push local var self stackpointer 16
addi $sp, $sp, -4          #Push local var instance stackpointer 12
addi $sp, $sp, -4          #Push local var type_name@0 stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion new_ctr_Complex
#Allocate a una class Complex puntero en sp + 8
#atributo type_name en puntero + 0
#atributo x en puntero + 4
#atributo y en puntero + 8
li $a0, 12
li $v0, 9
syscall
sw $v0, 8($sp)          #Reservando memoria para una instancia de tipo Complex
lw $t0, 8($sp)          #Lee de la pila instance en 8 para assignar
sw $t0, 12($sp)          #Escribe en la pila el valor que se le asigno a self
la $t0, Complex
sw $t0, 4($sp)          #Cargando el nombre del tipo desde el data
lw $t0, 8($sp)          #Buscando en la pila la variable instance y guarda la direccion a la que apunta
lw $t1, 4($sp)          #Buscando el valor que se va a guardar en la propiedad
sw $t1, 0($t0)          #Seteando el valor en la direccion de la memoria del objeto          #Assignando el nombre del tipo en el campo type
lw $s0, 8($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 16          #Limpia la pila
jr $ra

Complex_init:
#Parametro self en stackpoiner + 44
#Parametro a@0 en stackpoiner + 40
#Parametro b@0 en stackpoiner + 36
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 32
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 28
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 24
addi $sp, $sp, -4          #Push local var step@block@1 stackpointer 20
addi $sp, $sp, -4          #Push local var int_eq@_a@1 stackpointer 16
addi $sp, $sp, -4          #Push local var int_eq@_b@1 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Complex_init          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
lw $t0, 40($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 4($t0)          #Buscando el valor de la propiedad x
sw $t1, 24($sp)          #Salvando el valor de la propiedad x en la pila en el valor local int_eq@_a@0          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 36($sp)          #Lee de la pila a@0 en 36 para assignar
sw $t0, 20($sp)          #Escribe en la pila el valor que se le asigno a int_eq@_b@0          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 24($sp)          #carga en $t1 lo que hay en 24 
lw $t2, 20($sp)          #carga en $t2 lo que hay en 20 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 28($sp)          #Pon en la posicion 28 el valor de $t3          #Inicio del paso 1 de una sequencia Block
lw $t0, 40($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 8($t0)          #Buscando el valor de la propiedad y
sw $t1, 12($sp)          #Salvando el valor de la propiedad y en la pila en el valor local int_eq@_a@1          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 32($sp)          #Lee de la pila b@0 en 32 para assignar
sw $t0, 8($sp)          #Escribe en la pila el valor que se le asigno a int_eq@_b@1          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 12($sp)          #carga en $t1 lo que hay en 12 
lw $t2, 8($sp)          #carga en $t2 lo que hay en 8 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 16($sp)          #Pon en la posicion 16 el valor de $t3          #Inicio del paso 2 de una sequencia Block
lw $t0, 40($sp)          #Lee de la pila self en 40 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 44          #Limpia la pila
jr $ra          #Final de la function init

Complex_reflect_X:
#Parametro self en stackpoiner + 28
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 24
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 20
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 16
addi $sp, $sp, -4          #Push local var compl@_unary@0 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Complex_reflect_X          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
lw $t0, 24($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 8($t0)          #Buscando el valor de la propiedad y
sw $t1, 16($sp)          #Salvando el valor de la propiedad y en la pila en el valor local int_eq@_a@0          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 24($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 8($t0)          #Buscando el valor de la propiedad y
sw $t1, 8($sp)          #Salvando el valor de la propiedad y en la pila en el valor local compl@_unary@0          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 16($sp)          #carga en $t1 lo que hay en 16 
lw $t2, 12($sp)          #carga en $t2 lo que hay en 12 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 20($sp)          #Pon en la posicion 20 el valor de $t3          #Inicio del paso 1 de una sequencia Block
lw $t0, 24($sp)          #Lee de la pila self en 24 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 28          #Limpia la pila
jr $ra          #Final de la function reflect_X

Complex_reflect_Y:
#Parametro self en stackpoiner + 28
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 24
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 20
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 16
addi $sp, $sp, -4          #Push local var compl@_unary@0 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Complex_reflect_Y          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
lw $t0, 24($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 4($t0)          #Buscando el valor de la propiedad x
sw $t1, 16($sp)          #Salvando el valor de la propiedad x en la pila en el valor local int_eq@_a@0          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 24($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 4($t0)          #Buscando el valor de la propiedad x
sw $t1, 8($sp)          #Salvando el valor de la propiedad x en la pila en el valor local compl@_unary@0          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 16($sp)          #carga en $t1 lo que hay en 16 
lw $t2, 12($sp)          #carga en $t2 lo que hay en 12 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 20($sp)          #Pon en la posicion 20 el valor de $t3          #Inicio del paso 1 de una sequencia Block
lw $t0, 24($sp)          #Lee de la pila self en 24 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 28          #Limpia la pila
jr $ra          #Final de la function reflect_Y

Complex_reflect_0:
#Parametro self en stackpoiner + 44
addi $sp, $sp, -4          #Push local var step@block@0 stackpointer 40
addi $sp, $sp, -4          #Push local var int_eq@_a@0 stackpointer 36
addi $sp, $sp, -4          #Push local var int_eq@_b@0 stackpointer 32
addi $sp, $sp, -4          #Push local var compl@_unary@0 stackpointer 28
addi $sp, $sp, -4          #Push local var step@block@1 stackpointer 24
addi $sp, $sp, -4          #Push local var int_eq@_a@1 stackpointer 20
addi $sp, $sp, -4          #Push local var int_eq@_b@1 stackpointer 16
addi $sp, $sp, -4          #Push local var compl@_unary@1 stackpointer 12
addi $sp, $sp, -4          #Push local var @result stackpointer 8
addi $sp, $sp, -4          #Push local var $ra stackpointer 4
sw $ra, 0($sp)          #Agrega $ra a la pila para salvar el punto de retorno de la funcion Complex_reflect_0          #Inicio de una secuencia Block          #Inicio del paso 0 de una sequencia Block
lw $t0, 40($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 4($t0)          #Buscando el valor de la propiedad x
sw $t1, 32($sp)          #Salvando el valor de la propiedad x en la pila en el valor local int_eq@_a@0          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 40($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 4($t0)          #Buscando el valor de la propiedad x
sw $t1, 24($sp)          #Salvando el valor de la propiedad x en la pila en el valor local compl@_unary@0          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 32($sp)          #carga en $t1 lo que hay en 32 
lw $t2, 28($sp)          #carga en $t2 lo que hay en 28 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 36($sp)          #Pon en la posicion 36 el valor de $t3          #Inicio del paso 1 de una sequencia Block
lw $t0, 40($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 8($t0)          #Buscando el valor de la propiedad y
sw $t1, 16($sp)          #Salvando el valor de la propiedad y en la pila en el valor local int_eq@_a@1          #Resolucion del operado izquierdo de una opercion int_eq
lw $t0, 40($sp)          #Buscando la instancia de la clase Complex en la pila
lw $t1, 8($t0)          #Buscando el valor de la propiedad y
sw $t1, 8($sp)          #Salvando el valor de la propiedad y en la pila en el valor local compl@_unary@1          #Resolucion del operado derecha de una opercion int_eq
lw $t1, 16($sp)          #carga en $t1 lo que hay en 16 
lw $t2, 12($sp)          #carga en $t2 lo que hay en 12 
seq $t3, $t2, $t1          #$t3 = $t2 == $ t1
sw $t3, 20($sp)          #Pon en la posicion 20 el valor de $t3          #Inicio del paso 2 de una sequencia Block
lw $t0, 40($sp)          #Lee de la pila self en 40 para assignar
sw $t0, 4($sp)          #Escribe en la pila el valor que se le asigno a @result
lw $s0, 4($sp)          #Envia el resultado de la funcion en $s0
lw $ra, 0($sp)          #Lee el $ra mas profundo de la pila para retornar a la funcion anterior
addi $sp, $sp, 44          #Limpia la pila
jr $ra          #Final de la function reflect_0


IO_out_string:
li $v0, 4
lw $a0, 0($sp)
syscall
lw $a0, 4($sp)
addi $sp, $sp, 8
jr $ra
